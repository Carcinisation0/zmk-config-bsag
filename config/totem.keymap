// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include "../zmk-nodefree-config/helper.h"
#include "../zmk-nodefree-config/keypos_def/keypos_38keys.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>


//#define TODO ___
#define ___ &none

#define base 0

#define alpha1 1
#define alpha2 2

#define num 3
#define game 4
#define gameplus 5
#define nav 6



// ---- mouse ----
#define ZMK_POINTING_DEFAULT_MOVE_VAL 1500  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20    // default: 10

#include <dt-bindings/zmk/pointing.h>



//#include "combos.dtsi"

// navigation bindings for back/forward and prev tab/next tab
#define BACK &kp LG(LBKT)
#define FWD &kp LG(RBKT)
#define SCRSHOT &kp LG(LS(S))

// hyper and meh keys
#define HYP LS(LC(LA(LGUI)))
#define MEH LS(LC(LALT))


/* ------------------------ general config ----------------------- */

#define QUICK_TAP_MS 175

// smart-layer config
&caps_word {  
    // /delete-property/ ignore-modifiers; // mods deactivate, requires PR #1451
    /delete-property/ ignore-numbers;
    continue-list = <BACKSPACE ENTER DELETE UNDERSCORE MINUS>;
};

// key-repeat config
&key_repeat {
    usage-pages = <HID_USAGE_KEY HID_USAGE_CONSUMER>; // repeat all keys
};

// sticky key aka 'one-shot mods'
&sk {
    release-after-ms = <2000>;
    quick-release;
};

// default layer-tap config
&lt {  
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      // thumbs

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_BEHAVIOR(NAME, hold_tap, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )
MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

// special HRMs for the right meh key, as it involves a modmorph
MAKE_HRM(hmr_meh, &kp, &comma_morph, KEYS_L THUMBS)
// MAKE_HRM(hmr_lpar, &kp, &lpar, KEYS_L THUMBS)    // "    "   "   "
// MAKE_HRM(hmr_rpar, &kp, &rpar, KEYS_L THUMBS)    // "    "   "   "

// mod_morph keys
// tap: qmark | shift + tap: excl
ZMK_BEHAVIOR(qexcl, mod_morph,
    bindings = <&kp QMARK>, <&kp EXCL>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)

// tap: comma | shift + tap: semicolon 
ZMK_BEHAVIOR(comma_morph, mod_morph,
    bindings = <&kp COMMA>, <&kp SEMICOLON>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)

// tap: dot | shift + tap: colon 
ZMK_BEHAVIOR(dot_morph, mod_morph,
    bindings = <&kp DOT>, <&kp COLON>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)

/ {

    combos {
        compatible = "zmk,combos";

//    ============ base ============

        apos {
            bindings = <&kp APOS>;
            key-positions = <6 7>;
            layers = <0>;
        };

        quote {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <8 7>;
            layers = <0>;
        };

        escp {
            bindings = <&kp ESC>;
            key-positions = <0 1>;
            layers = <0>;
        };

//      -------- control ---------

        ctrl_y {
            bindings = <&kp LC(Y)>;
            key-positions = <3 4>;
            layers = <0>;
        };

       ctrl_f {
            bindings = <&kp LC(F)>;
            key-positions = <1 2>;
            layers = <0>;
        };

        ctrl_z {
            bindings = <&kp LC(Z)>;
            key-positions = <13 14>;
            layers = <0>;
        };

        ctrl_c {
            bindings = <&kp LC(C)>;
            key-positions = <22 23>;
            layers = <0>;
        };

        ctrl_v {
            bindings = <&kp LC(V)>;
            key-positions = <23 24>;
            layers = <0>;
        };

        ctrl_x {
            bindings = <&kp LC(X)>;
            key-positions = <21 22>;
            layers = <0>;
        };

//    ============ num  ============

        num_dot {
            bindings = <&kp DOT>;
            key-positions = <3 2>;
            layers = <num>;
        };

        num_comma {
            bindings = <&kp COMMA>;
            key-positions = <1 2>;
            layers = <num>;
        };

        num_plus {
            bindings = <&kp PLUS>;
            key-positions = <12 13>;
            layers = <num>;
        };

        num_minus {
            bindings = <&kp MINUS>;
            key-positions = <11 12>;
            layers = <num>;
        };

        num_mult {
            bindings = <&kp KP_MULTIPLY>;
            key-positions = <23 24>;
            layers = <num>;
        };

        num_div {
            bindings = <&kp SLASH>;
            key-positions = <22 23>;
            layers = <num>;
        };

//    ============ nav  ============

        screen {
            bindings = <&kp LG(LS(S))>;
            key-positions = <22 23 24>;
            layers = <nav>;
        };

//    ============ game ============

        gm_n1 {
            bindings = <&kp N1>;
            key-positions = <1 2>;
            layers = <game>;
        };

        gm_n2 {
            bindings = <&kp N2>;
            key-positions = <2 3>;
            layers = <game>;
        };

        gm_n3 {
            bindings = <&kp N3>;
            key-positions = <1 2 3>;
            layers = <game>;
        };

//    ========== general  ==========

          fun_left {
            bindings = <&sl 5>;
            key-positions = <13 34>;
        };

        fun_right {
            bindings = <&sl 5>;
            key-positions = <35 16>;
        };

//--------------------------------------
//    ======== experimental ========

// letters

        b {
            bindings = <&kp B>;
            key-positions = <2 3>;
            layers = <alpha1>;
        };

        g {
            bindings = <&kp G>;
            key-positions = <12 13>;
            layers = <alpha1>;
        };

        z {
            bindings = <&kp Z>;
            key-positions = <23 24>;
            layers = <alpha1>;
        };


        j {
            bindings = <&kp J>;
            key-positions = <6 7>;
            layers = <alpha1>;
        };

        m {
            bindings = <&kp M>;
            key-positions = <16 17>;
            layers = <alpha1>;
        };

        k {
            bindings = <&kp K>;
            key-positions = <27 28>;
            layers = <alpha1>;
        };

/*
        q {
            bindings = <&kp Q>;
            key-positions = <11 12>;
            layers = <alpha1>;
        };

        x {
            bindings = <&kp X>;
            key-positions = <17 18>;
            layers = <alpha1>;
        };
*/

// control

        ctrl_c2 {
            bindings = <&kp LC(C)>;
            key-positions = <22 23>;
            layers = <nav>;
        };

        ctrl_v2 {
            bindings = <&kp LC(V)>;
            key-positions = <23 24>;
            layers = <nav>;
        };

        ctrl_f2 {
            bindings = <&kp LC(F)>;
            key-positions = <1 2>;
            layers = <nav>;
        };

        ctrl_z2 {
            bindings = <&kp LC(Z)>;
            key-positions = <2 3>;
            layers = <nav>;
        };

        ctrl_y2 {
            bindings = <&kp LC(Y)>;
            key-positions = <1 2 3>;
            layers = <nav>;
        };

        ctrl_x2 {
            bindings = <&kp LC(X)>;
            key-positions = <10 11>;
            layers = <nav>;
        };
/*
// bspc

        bspc21 {
            bindings = <&kp BACKSPACE>;
            key-positions = <1 2>;
            layers = <alpha1>;
        };

        bspc22 {
            bindings = <&kp BACKSPACE>;
            key-positions = <7 8>;
            layers = <alpha1>;
        };

        delword21 {
            bindings = <&kp LC(BACKSPACE)>;
            key-positions = <1 2 3>;
            layers = <alpha1>;
        };
        
        delword22 {
            bindings = <&kp LC(BACKSPACE)>;
            key-positions = <6 7 8>;
            layers = <alpha1>;
        };
*/

    };


// TODO: Add hyper key as HRM
    keymap {
        compatible = "zmk,keymap";

// 0
base { // ColemakDHm
            bindings = <
      &hml F1 Q    &hml F2 W     &hml F3 F         &hml F4 P        &hml F5 B          &hml F6 J     &hml F7 L          &hml F8 U        &hml F9 Y     &hml F10 SEMI
      &hml LALT A  &hml LGUI R   &hml LCTRL S      &hml LSHFT T     &hml F11 G         &hml F12 M    &hmr RSHFT N       &hmr RCTRL E     &hmr RGUI I   &hmr RALT O
___   &kp X        &kp C         &kp D             &kp V            &kp Z              &kp K         &kp H              &kp COMMA        &kp DOT       &kp FSLH     ___
                                 ___               &mo nav          &lt num SPACE      &sk RSHFT     &kp RALT           ___
            >;  
        };

//    ======== experimental ========
//____________________________________________________________________________________________________________________________________________________________________________

// 1
alpha1 {
            bindings = <
      ___          &kp W         &hml F3 F         &hml F4 P        ___             ___         &hml F7 L          &hml F8 U        &hml F9 Y     ___
      &hml LALT A  &hml LGUI R   &hml LCTRL S      &hml LSHFT T     ___             ___         &hmr RSHFT N       &hmr RCTRL E     &hmr RGUI I   &hmr RALT O
___   ___          &kp C         &kp D             &kp V            ___             ___         &kp H              &kp COMMA        &kp DOT       ___           &to 0
                                 ___               &sl nav          &lt num SPACE   &sk RSHFT   &sl alpha2         ___
            >;
        };

// Q X B G Z J M K

// 2
alpha2 {
            bindings = <
      ___           &kp BSLH      &kp PIPE          &kp EXCL        ___          ___         &kp QUESTION   &kp LS(SEMI)     &kp SEMI      ___
      &hml LALT Q   &hml LGUI Z   &hml LCTRL B      &hml LSHFT G    ___          ___         &hmr RSHFT M   &hmr RCTRL J     &hmr RGUI K   &hmr RALT X
___   ___           &kp SLASH     &kp UNDER         &kp GRAVE       ___          ___         &kp TILDE      &kp LS(COMMA)    &kp LS(DOT)   ___           &to 0
                                 ___                &kp RALT        &kp SPACE    &sk RSHFT   &mo num          ___
            >;  
        };
//____________________________________________________________________________________________________________________________________________________________________________



// 3
num { 
            bindings = <
         ___              &kp N9       &kp N8     &kp N7     ___        ___         &kp LEFT_BRACKET       &kp RIGHT_BRACKET       &kp BACKSLASH   &kp PIPE
         &kp N3           &kp N2       &kp N1     &kp N0     ___        ___         &kp LEFT_PARENTHESIS   &kp RIGHT_PARENTHESIS   &kp UNDER       &kp EQUAL
&none    ___              &kp N6       &kp N5     &kp N4     ___        ___         &kp LEFT_BRACE         &kp RIGHT_BRACE         &kp GRAVE       &kp TILDE  &trans
                                       &none      &kp RSHFT  &none      &kp RSHFT   &none                  &none
            >; 
        }; 

// 4
game {
            bindings = <
         &kp TAB           &kp Q  &kp W   &kp E   &kp R        &trans  &trans          &kp UP_ARROW  &trans     &trans
         &kp RIGHT_SHIFT   &kp A  &kp S   &kp D   &sl gameplus &trans  &kp LEFT_ARROW  &kp DOWN      &kp RIGHT  &kp ENTER
&kp ESC  &kp LEFT_CONTROL  &kp Z  &kp X   &kp C   &kp F        &trans  &trans          &trans        &trans     &trans     &to 0
                                  &mo 0   &mo nav &kp SPACE    &to 0   &to 0           &to 0
            >;
        };

// 5
gameplus {
            bindings = <
        &kp F5        &kp NUMBER_1  &kp N2  &kp N3  &kp N4          &trans  &trans  &trans  &trans  &trans
        &kp LEFT_ALT  &kp SLASH     &kp K   &kp Y   &kp V           &trans  &trans  &trans  &trans  &trans
&kp F3  &kp L         &kp I         &kp T   &kp N5  &kp N6          &trans  &trans  &trans  &trans  &trans  &trans
                                    &kp J   &kp G   &kp M           &trans  &trans  &trans
            >;
        };

// 6
nav {
            bindings = <
         &kp ESC           &kp DEL       &kp UP            &kp BACKSPACE  &kp LC(BACKSPACE)    ___          &kp PAGE_DOWN   &to alpha1         &kp PAGE_UP    ___
         &kp ENTER         &kp LEFT      &kp DOWN          &kp RIGHT      &kp PAGE_UP          ___          &kp C_VOL_DN    &kp C_PLAY_PAUSE   &kp C_VOL_UP   ___
&kp ESC  &kp LEFT_CONTROL  &kp ESC       &kp C_PLAY_PAUSE  &kp TAB        &kp PAGE_DOWN        ___          &kp LS(LC(TAB)) &kp LS(ENTER)      &kp LC(TAB)    ___   &to game
                                         &trans            &trans         &trans               &kp RSHIFT   &kp KP_N0       &trans
            >;
        };  




    };
};
    
/* --------------------------------- combos --------------------------------- */
/*
   ╭────────────────────┬────────────────────╮     ╭─────────────────────┬─────────────────────╮
   │  0   1   2   3   4 │  5   6   7   8   9 │     │ LT4 LT3 LT2 LT1 LT0 │ RT0 RT1 RT2 RT3 RT4 │
   │ 10  11  12  13  14 │ 15  16  17  18  19 │     │ LM4 LM3 LM2 LM1 LM0 │ RM0 RM1 RM2 RM3 RM4 │
  20 21  22  23  24  25 │ 26  27  28  29  30 31  LB5 LB4 LB3 LB2 LB1 LB0 │ RB0 RB1 RB2 RB3 RB4 RB5
   ╰───────╮ 32  33  34 │ 35  36  37 ╭───────╯     ╰───────╮ LH2 LH1 LH0 │ RH0 RH1 RH2 ╭───────╯
           ╰────────────┴────────────╯                     ╰─────────────┴─────────────╯             */
// use global-quick-tap-ms for combos (requires PR 1387)
